// Generated by psc-bundle 0.11.5
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 69, column 3 - line 69, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 63, column 1 - line 68, column 43: " + [ x.constructor.name ]);
  };
  var floor = function ($3) {
      return unsafeClamp($$Math.floor($3));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($175) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($175));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($178) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($178));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["deleteAt"] = deleteAt;
  exports["index"] = index;
  exports["null"] = $$null;
  exports["tail"] = tail;
  exports["length"] = $foreign.length;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var v = $foreign.getCanvasWidth(ce)();
          var v1 = $foreign.getCanvasHeight(ce)();
          return {
              width: v, 
              height: v1
          };
      };
  };
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillRect"] = $foreign.fillRect;
  exports["fillText"] = $foreign.fillText;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["measureText"] = $foreign.measureText;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setFont"] = $foreign.setFont;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.sampleOn = function(sig1) {
    return function(sig2) {
      var out = make(sig2.get());
      sig1.subscribe(function() {
        out.set(sig2.get());
      });
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  exports["flippedMap"] = flippedMap;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
  exports["sampleOn"] = $foreign.sampleOn;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                   
  var second = 1000.0;  
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;
  exports["second"] = second;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  exports["keyPressed"] = keyPressed;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.11.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal_Time = PS["Signal.Time"];        
  var Velocity = (function () {
      function Velocity(value0) {
          this.value0 = value0;
      };
      Velocity.create = function (value0) {
          return new Velocity(value0);
      };
      return Velocity;
  })();
  var Position = (function () {
      function Position(value0) {
          this.value0 = value0;
      };
      Position.create = function (value0) {
          return new Position(value0);
      };
      return Position;
  })();
  var NotStarted = (function () {
      function NotStarted() {

      };
      NotStarted.value = new NotStarted();
      return NotStarted;
  })();
  var Playing = (function () {
      function Playing() {

      };
      Playing.value = new Playing();
      return Playing;
  })();
  var GameOver = (function () {
      function GameOver() {

      };
      GameOver.value = new GameOver();
      return GameOver;
  })();
  var DirLeft = (function () {
      function DirLeft() {

      };
      DirLeft.value = new DirLeft();
      return DirLeft;
  })();
  var DirRight = (function () {
      function DirRight() {

      };
      DirRight.value = new DirRight();
      return DirRight;
  })();
  var DirUp = (function () {
      function DirUp() {

      };
      DirUp.value = new DirUp();
      return DirUp;
  })();
  var DirDown = (function () {
      function DirDown() {

      };
      DirDown.value = new DirDown();
      return DirDown;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var LeftArrow = (function () {
      function LeftArrow() {

      };
      LeftArrow.value = new LeftArrow();
      return LeftArrow;
  })();
  var UpArrow = (function () {
      function UpArrow() {

      };
      UpArrow.value = new UpArrow();
      return UpArrow;
  })();
  var RightArrow = (function () {
      function RightArrow() {

      };
      RightArrow.value = new RightArrow();
      return RightArrow;
  })();
  var DownArrow = (function () {
      function DownArrow() {

      };
      DownArrow.value = new DownArrow();
      return DownArrow;
  })();
  var wrap = function (mn) {
      return function (mx) {
          return function (v) {
              if (v < mn) {
                  return mx;
              };
              if (v >= mx) {
                  return mn;
              };
              if (Data_Boolean.otherwise) {
                  return v;
              };
              throw new Error("Failed pattern match at Main line 153, column 1 - line 155, column 29: " + [ mn.constructor.name, mx.constructor.name, v.constructor.name ]);
          };
      };
  };
  var wrapPos = function (mnx) {
      return function (mxx) {
          return function (mny) {
              return function (mxy) {
                  return function (v) {
                      return new Position({
                          x: wrap(mnx)(mxx)(v.value0.x), 
                          y: wrap(mny)(mxy)(v.value0.y)
                      });
                  };
              };
          };
      };
  };
  var velocity = function (v) {
      return function (v1) {
          return new Position({
              x: v.value0.x + v1.value0.x | 0, 
              y: v.value0.y + v1.value0.y | 0
          });
      };
  };
  var updateInput = function (input) {
      return function (st) {
          var $66 = {};
          for (var $67 in st) {
              if ({}.hasOwnProperty.call(st, $67)) {
                  $66[$67] = st[$67];
              };
          };
          $66.input = input;
          return $66;
      };
  };
  var tileSize = 20.0;
  var tileCount = 20;
  var startPlaying = function (st) {
      var $69 = {};
      for (var $70 in st) {
          if ({}.hasOwnProperty.call(st, $70)) {
              $69[$70] = st[$70];
          };
      };
      $69.playState = Playing.value;
      return $69;
  };
  var shuffle = (function () {
      var f = function (acc) {
          return function (x) {
              return Data_Tuple.Tuple.create(Data_Array.snoc(acc)(x));
          };
      };
      var go = function (v) {
          var $73 = Data_Array["null"](v.value1);
          if ($73) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v.value0);
          };
          return function __do() {
              var v1 = Control_Monad_Eff_Random.randomInt(0)(Data_Array.length(v.value1) - 1 | 0)();
              return go(Data_Maybe.fromMaybe(new Data_Tuple.Tuple([  ], [  ]))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(f(v.value0))(Data_Array.index(v.value1)(v1)))(Data_Array.deleteAt(v1)(v.value1))))();
          };
      };
      return function ($172) {
          return go(Data_Tuple.Tuple.create([  ])($172));
      };
  })();
  var playerTrailColor = "#00cc00";
  var playerHeadColorFail = "#ffa500";
  var playerHeadColor = "#00ff00";
  var pieceSize = tileSize - 2.0;
  var intersects = function (v) {
      return function (v1) {
          return v.value0.x === v1.value0.x && v.value0.y === v1.value0.y;
      };
  };
  var initialPlayer = {
      pos: new Position({
          x: tileCount / 2 | 0, 
          y: tileCount / 2 | 0
      }), 
      vel: new Velocity({
          x: 0, 
          y: 0
      }), 
      dir: Data_Maybe.Nothing.value, 
      len: 3, 
      trail: [  ]
  };
  var getApplePos = function (a) {
      return Data_Array.index(a.pool)(a.idx);
  };
  var frameRate = Signal_Time.every(Signal_Time.second / 15.0);
  var eqPosition = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0.x === v1.value0.x && v.value0.y === v1.value0.y;
      };
  });
  var nextApplePos = function (p) {
      var moveNext = function (a$prime) {
          var idx = a$prime.idx + 1 | 0;
          var $85 = idx >= Data_Array.length(a$prime.pool);
          if ($85) {
              var $86 = {};
              for (var $87 in a$prime) {
                  if ({}.hasOwnProperty.call(a$prime, $87)) {
                      $86[$87] = a$prime[$87];
                  };
              };
              $86.idx = 0;
              return $86;
          };
          var $89 = {};
          for (var $90 in a$prime) {
              if ({}.hasOwnProperty.call(a$prime, $90)) {
                  $89[$90] = a$prime[$90];
              };
          };
          $89.idx = idx;
          return $89;
      };
      var checkPlacement = function (p$prime) {
          return function (a$prime) {
              var v = getApplePos(a$prime);
              if (v instanceof Data_Maybe.Just) {
                  var $93 = Data_Eq.eq(eqPosition)(v.value0)(p$prime.pos) || Data_Foldable.elem(Data_Foldable.foldableArray)(eqPosition)(v.value0)(p$prime.trail);
                  if ($93) {
                      return nextApplePos(p$prime)(a$prime);
                  };
                  return a$prime;
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return a$prime;
              };
              throw new Error("Failed pattern match at Main line 249, column 7 - line 254, column 22: " + [ v.constructor.name ]);
          };
      };
      return function ($173) {
          return checkPlacement(p)(moveNext($173));
      };
  };
  var eqPlayState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof NotStarted && y instanceof NotStarted) {
              return true;
          };
          if (x instanceof Playing && y instanceof Playing) {
              return true;
          };
          if (x instanceof GameOver && y instanceof GameOver) {
              return true;
          };
          return false;
      };
  });
  var render = function (ctx) {
      return function (st) {
          var renderTile = function (color) {
              return function (v) {
                  return function __do() {
                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle(color)(ctx))();
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillRect(ctx)({
                          x: Data_Int.toNumber(v.value0.x) * tileSize, 
                          y: Data_Int.toNumber(v.value0.y) * tileSize, 
                          w: pieceSize, 
                          h: pieceSize
                      }))();
                  };
              };
          };
          var renderTrail = function (ts) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(ts)(renderTile(playerTrailColor));
          };
          var renderMsg = function (msg) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFont("20px sans-serif")(ctx))();
                  var v = Graphics_Canvas.measureText(ctx)(msg)();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("white")(ctx))();
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillText(ctx)(msg)((st.boardDim.width - v.width) / 2.0)(40.0))();
              };
          };
          var renderNotStarted = renderMsg("Press the arrow keys to start");
          var renderGameOver = renderMsg("GAME OVER :(");
          var renderOverlay = (function () {
              if (st.playState instanceof NotStarted) {
                  return renderNotStarted;
              };
              if (st.playState instanceof GameOver) {
                  return renderGameOver;
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
          })();
          var renderBoard = function __do() {
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("black")(ctx))();
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillRect(ctx)({
                  x: 0.0, 
                  y: 0.0, 
                  w: st.boardDim.width, 
                  h: st.boardDim.height
              }))();
          };
          var renderApple = function (a) {
              var v = getApplePos(a);
              if (v instanceof Data_Maybe.Just) {
                  return renderTile("red")(v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Main line 354, column 7 - line 356, column 30: " + [ v.constructor.name ]);
          };
          var headColor = (function () {
              var $104 = Data_Eq.eq(eqPlayState)(st.playState)(GameOver.value);
              if ($104) {
                  return playerHeadColorFail;
              };
              return playerHeadColor;
          })();
          var renderHead = renderTile(headColor);
          var renderPlayer = function (p) {
              return function __do() {
                  renderTrail(p.trail)();
                  return renderHead(p.pos)();
              };
          };
          var renderGame = function __do() {
              renderBoard();
              renderApple(st.apple)();
              return renderPlayer(st.player)();
          };
          return function __do() {
              renderGame();
              return renderOverlay();
          };
      };
  };
  var eqDirection = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof DirLeft && y instanceof DirLeft) {
              return true;
          };
          if (x instanceof DirRight && y instanceof DirRight) {
              return true;
          };
          if (x instanceof DirUp && y instanceof DirUp) {
              return true;
          };
          if (x instanceof DirDown && y instanceof DirDown) {
              return true;
          };
          return false;
      };
  });
  var playerLogic = function (st) {
      var wrapPlayer = function (p) {
          var $107 = {};
          for (var $108 in p) {
              if ({}.hasOwnProperty.call(p, $108)) {
                  $107[$108] = p[$108];
              };
          };
          $107.pos = wrapPos(0)(tileCount)(0)(tileCount)(p.pos);
          return $107;
      };
      var trimTrail = function (p) {
          if (Data_Array.length(p.trail) > p.len) {
              var $111 = {};
              for (var $112 in p) {
                  if ({}.hasOwnProperty.call(p, $112)) {
                      $111[$112] = p[$112];
                  };
              };
              $111.trail = Data_Maybe.fromMaybe([  ])(Data_Array.tail(p.trail));
              return $111;
          };
          if (Data_Boolean.otherwise) {
              return p;
          };
          throw new Error("Failed pattern match at Main line 185, column 3 - line 220, column 69: " + [ p.constructor.name ]);
      };
      var playerVelocity = function (p) {
          var $114 = {};
          for (var $115 in p) {
              if ({}.hasOwnProperty.call(p, $115)) {
                  $114[$115] = p[$115];
              };
          };
          $114.pos = velocity(p.pos)(p.vel);
          return $114;
      };
      var move = function (v) {
          return function (p) {
              if (v instanceof None) {
                  return p;
              };
              if (v instanceof LeftArrow) {
                  if (Data_Eq.eq(Data_Maybe.eqMaybe(eqDirection))(p.dir)(new Data_Maybe.Just(DirRight.value))) {
                      return p;
                  };
                  if (Data_Boolean.otherwise) {
                      var $119 = {};
                      for (var $120 in p) {
                          if ({}.hasOwnProperty.call(p, $120)) {
                              $119[$120] = p[$120];
                          };
                      };
                      $119.vel = new Velocity({
                          x: -1 | 0, 
                          y: 0
                      });
                      $119.dir = new Data_Maybe.Just(DirLeft.value);
                      return $119;
                  };
              };
              if (v instanceof UpArrow) {
                  if (Data_Eq.eq(Data_Maybe.eqMaybe(eqDirection))(p.dir)(new Data_Maybe.Just(DirDown.value))) {
                      return p;
                  };
                  if (Data_Boolean.otherwise) {
                      var $122 = {};
                      for (var $123 in p) {
                          if ({}.hasOwnProperty.call(p, $123)) {
                              $122[$123] = p[$123];
                          };
                      };
                      $122.vel = new Velocity({
                          x: 0, 
                          y: -1 | 0
                      });
                      $122.dir = new Data_Maybe.Just(DirUp.value);
                      return $122;
                  };
              };
              if (v instanceof RightArrow) {
                  if (Data_Eq.eq(Data_Maybe.eqMaybe(eqDirection))(p.dir)(new Data_Maybe.Just(DirLeft.value))) {
                      return p;
                  };
                  if (Data_Boolean.otherwise) {
                      var $125 = {};
                      for (var $126 in p) {
                          if ({}.hasOwnProperty.call(p, $126)) {
                              $125[$126] = p[$126];
                          };
                      };
                      $125.vel = new Velocity({
                          x: 1, 
                          y: 0
                      });
                      $125.dir = new Data_Maybe.Just(DirRight.value);
                      return $125;
                  };
              };
              if (v instanceof DownArrow) {
                  if (Data_Eq.eq(Data_Maybe.eqMaybe(eqDirection))(p.dir)(new Data_Maybe.Just(DirUp.value))) {
                      return p;
                  };
                  if (Data_Boolean.otherwise) {
                      var $128 = {};
                      for (var $129 in p) {
                          if ({}.hasOwnProperty.call(p, $129)) {
                              $128[$129] = p[$129];
                          };
                      };
                      $128.vel = new Velocity({
                          x: 0, 
                          y: 1
                      });
                      $128.dir = new Data_Maybe.Just(DirDown.value);
                      return $128;
                  };
              };
              throw new Error("Failed pattern match at Main line 185, column 3 - line 220, column 69: " + [ v.constructor.name, p.constructor.name ]);
          };
      };
      var eat = function (e) {
          return function (p) {
              if (e) {
                  var $132 = {};
                  for (var $133 in p) {
                      if ({}.hasOwnProperty.call(p, $133)) {
                          $132[$133] = p[$133];
                      };
                  };
                  $132.len = p.len + 1 | 0;
                  return $132;
              };
              return p;
          };
      };
      var addTrail = function (p) {
          var $135 = {};
          for (var $136 in p) {
              if ({}.hasOwnProperty.call(p, $136)) {
                  $135[$136] = p[$136];
              };
          };
          $135.trail = Data_Array.snoc(p.trail)(p.pos);
          return $135;
      };
      return wrapPlayer(playerVelocity(trimTrail(addTrail(eat(st.eating)(move(st.input)(st.player))))));
  };
  var player = (function () {
      var updatePlayer = function (st) {
          var $138 = {};
          for (var $139 in st) {
              if ({}.hasOwnProperty.call(st, $139)) {
                  $138[$139] = st[$139];
              };
          };
          $138.player = playerLogic(st);
          return $138;
      };
      var checkGameOver = function (st) {
          var $141 = Data_Foldable.elem(Data_Foldable.foldableArray)(eqPosition)(st.player.pos)(st.player.trail);
          if ($141) {
              var $142 = {};
              for (var $143 in st) {
                  if ({}.hasOwnProperty.call(st, $143)) {
                      $142[$143] = st[$143];
                  };
              };
              $142.playState = GameOver.value;
              return $142;
          };
          return st;
      };
      return function ($174) {
          return checkGameOver(updatePlayer($174));
      };
  })();
  var eqActiveInput = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return true;
          };
          if (x instanceof LeftArrow && y instanceof LeftArrow) {
              return true;
          };
          if (x instanceof UpArrow && y instanceof UpArrow) {
              return true;
          };
          if (x instanceof RightArrow && y instanceof RightArrow) {
              return true;
          };
          if (x instanceof DownArrow && y instanceof DownArrow) {
              return true;
          };
          return false;
      };
  });
  var eating = function (st) {
      var $147 = {};
      for (var $148 in st) {
          if ({}.hasOwnProperty.call(st, $148)) {
              $147[$148] = st[$148];
          };
      };
      $147.eating = Data_Maybe.maybe(false)(intersects(st.player.pos))(getApplePos(st.apple));
      return $147;
  };
  var apple = function (st) {
      if (st.eating) {
          var $151 = {};
          for (var $152 in st) {
              if ({}.hasOwnProperty.call(st, $152)) {
                  $151[$152] = st[$152];
              };
          };
          $151.apple = nextApplePos(st.player)(st.apple);
          return $151;
      };
      return st;
  };
  var gameLogic = function (input) {
      return function (st) {
          var step = function ($175) {
              return player(apple(eating(updateInput(input)($175))));
          };
          if (st.playState instanceof NotStarted) {
              var $155 = Data_Eq.notEq(eqActiveInput)(input)(None.value);
              if ($155) {
                  return step(startPlaying(st));
              };
              return st;
          };
          if (st.playState instanceof Playing) {
              return step(st);
          };
          if (st.playState instanceof GameOver) {
              return st;
          };
          throw new Error("Failed pattern match at Main line 298, column 3 - line 306, column 9: " + [ st.playState.constructor.name ]);
      };
  };
  var allPos = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(tileCount - 1 | 0))(function (v) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(tileCount - 1 | 0))(function (v1) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Position({
              x: v, 
              y: v1
          }));
      });
  });
  var activeInput = (function () {
      var toInput = function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      if (v) {
                          return LeftArrow.value;
                      };
                      if (v1) {
                          return UpArrow.value;
                      };
                      if (v2) {
                          return RightArrow.value;
                      };
                      if (v3) {
                          return DownArrow.value;
                      };
                      return None.value;
                  };
              };
          };
      };
      return function __do() {
          var v = Signal_DOM.keyPressed(37)();
          var v1 = Signal_DOM.keyPressed(38)();
          var v2 = Signal_DOM.keyPressed(39)();
          var v3 = Signal_DOM.keyPressed(40)();
          return Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(toInput)(v))(v1))(v2))(v3);
      };
  })();
  var gameState = function (dim) {
      var shuffleTimes = function (n) {
          return Data_Foldable.foldr(Data_Foldable.foldableArray)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Array.replicate(n)(shuffle));
      };
      var initialGameState = function (a) {
          return function (p) {
              return {
                  boardDim: dim, 
                  input: None.value, 
                  player: p, 
                  apple: a, 
                  eating: false, 
                  playState: NotStarted.value
              };
          };
      };
      return function __do() {
          var v = activeInput();
          var v1 = shuffleTimes(10)(allPos)();
          var a = nextApplePos(initialPlayer)({
              pool: v1, 
              idx: 0
          });
          return Signal.foldp(gameLogic)(initialGameState(a)(initialPlayer))(Signal.sampleOn(frameRate)(v));
      };
  };
  var runGame = function (canvas) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasDimensions(canvas)();
          var v1 = Graphics_Canvas.getContext2D(canvas)();
          var v2 = gameState(v)();
          return Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(v2)(render(v1)))();
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("app")();
      return Data_Maybe.maybe(Control_Monad_Eff_Console.error("missing canvas"))(runGame)(v)();
  };
  exports["None"] = None;
  exports["LeftArrow"] = LeftArrow;
  exports["UpArrow"] = UpArrow;
  exports["RightArrow"] = RightArrow;
  exports["DownArrow"] = DownArrow;
  exports["DirLeft"] = DirLeft;
  exports["DirRight"] = DirRight;
  exports["DirUp"] = DirUp;
  exports["DirDown"] = DirDown;
  exports["NotStarted"] = NotStarted;
  exports["Playing"] = Playing;
  exports["GameOver"] = GameOver;
  exports["Position"] = Position;
  exports["Velocity"] = Velocity;
  exports["activeInput"] = activeInput;
  exports["allPos"] = allPos;
  exports["apple"] = apple;
  exports["eating"] = eating;
  exports["frameRate"] = frameRate;
  exports["gameLogic"] = gameLogic;
  exports["gameState"] = gameState;
  exports["getApplePos"] = getApplePos;
  exports["initialPlayer"] = initialPlayer;
  exports["intersects"] = intersects;
  exports["main"] = main;
  exports["nextApplePos"] = nextApplePos;
  exports["pieceSize"] = pieceSize;
  exports["player"] = player;
  exports["playerHeadColor"] = playerHeadColor;
  exports["playerHeadColorFail"] = playerHeadColorFail;
  exports["playerLogic"] = playerLogic;
  exports["playerTrailColor"] = playerTrailColor;
  exports["render"] = render;
  exports["runGame"] = runGame;
  exports["shuffle"] = shuffle;
  exports["startPlaying"] = startPlaying;
  exports["tileCount"] = tileCount;
  exports["tileSize"] = tileSize;
  exports["updateInput"] = updateInput;
  exports["velocity"] = velocity;
  exports["wrap"] = wrap;
  exports["wrapPos"] = wrapPos;
  exports["eqPosition"] = eqPosition;
  exports["eqActiveInput"] = eqActiveInput;
  exports["eqDirection"] = eqDirection;
  exports["eqPlayState"] = eqPlayState;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();